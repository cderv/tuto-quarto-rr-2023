---
title: "Passer de rmarkdown √† quarto"
subtitle: "De R Markdown √† Quarto pour aller plus loin avec ses publications"
institute: "Posit"
author: "Christophe Dervieux"
date: "2023-06-21"
format: clean-revealjs
editor: visual
---

```{r}
#| label: setup
#| include: false

options(width = 65)

library(countdown)
```

## D√©marrer avec Quarto !

::: callout
# Faisons ensemble !

Cr√©er un projet Quarto depuis RStudio et produire un HTML.
:::

::: panel-tabset
## RStudio IDE

File \> New Project...

![](images/rstudio-new-project-quarto.png){.absolute fig-alt="Menu cr√©ation de projet Quarto depuis RStudio IDE" top="320" left="400" width="450"}

## Quarto CLI

``` powershell
$ quarto create project
 ? Type ¬ª default
 ? Directory ¬ª quarto-101
Creating project at C:\Users\chris\AppData\Local\Temp\quarto-101:
  - Created _quarto.yml
  - Created Quarto-101.qmd
```
:::

## Explorons...

``` powershell
quarto-101
+¬¶¬¶ Quarto-101.qmd
L¬¶¬¶ _quarto.yml
```

</br>

::: columns
::: column
``` {.yaml filename="_quarto.yml"}
project:
  title: "Quarto-101"
```
:::

::: column
``` {.markdown filename="Quarto-101.qmd"}
---
title: "Quarto-101"
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.
```
:::
:::

## Produire un HTML

![Nouveau bouton pour transformer son document dans RStudio IDE](images/rstudio-render-quarto.png){fig-alt="Menu de RStudio IDE dans un document .qmd"}

``` {.bash filename="terminal"}
quarto render Quarto-101.qmd # defaults to html
quarto render Quarto-101.qmd --to html
```

## Produire un HTML

![](images/rstudio-render-quarto-html.png){fig-alt="Capture d'√©cran de la fen√™tre viewer de RStudio IDE apr√®s avoir g√©n√©rer un HTML."}

## Et mes documents existants alors ?

::: fragment
Convertir de `.Rmd` √† `.qmd` ?
:::

::: fragment
Pas n√©cessaire car quarto est compatible!

``` {.bash filename="terminal"}
quarto render my-favorite.Rmd --to html
```
:::

## √Ä vous !

```{r}
#| echo: false
countdown(minutes = 2)
```

::: callout
# Ajoutons au projet

1.  Cr√©er un sous-dossier dans le projet e.g `rapport`.
2.  Y d√©poser le fichier `.Rmd` d'exercices nomm√© [`manchots.Rmd`](https://raw.githubusercontent.com/cderv/tuto-quarto-rr-2023/main/exercises/manchots.Rmd) tel quel.
3.  Produire un HTML avec `quarto preview rapport/manchots.Rmd` dans le Terminal.
4.  Produire un HTML avec le bouton Render de l'IDE.

:::

::: callout-tip

## Afficher le bouton Render au lieu de Knit pour un Rmd dans un projet Quarto

Retirer `output: html_document` de l'en-t√™te YAML and sauvegarder le fichier : Le bouton **Render** devrait maintenant appara√Ætre.
:::

# De `.Rmd` √† `.qmd`

Voyons ce qui change!

## YAML: l'en-t√™te

Le "Yet Another Markup Language" ou "YAML Ain't Markup Language" est toujours utilis√© pour fournir des m√©tadonn√©es au niveau du document.

```{.yaml code-line-numbers="|5-7"}
---
title: "Une histoire de manchots"
author: "C. Dervieux"
date: "21/06/2023"
format: 
  html: 
    toc: true
---
```

## YAML: Chunk options {auto-animate="true"}

````{verbatim}
```{r species, warning=FALSE, fig.width=5, fig.cap="A propos de penguins"}
ggplot(
  penguins,
  aes(
    x = bill_length_mm, y = bill_depth_mm,
    color = species, shape = species
  )
) +
  geom_point() +
  labs(x = "Bill length (mm)", y = "Bill depth (mm)")
```
````

## YAML: Chunk options {auto-animate="true"}

````{verbatim}
```{r}
#| label: bill-dims-species
#| fig-width: 5
#| fig-cap: √Ä propos de penguins
ggplot(
  penguins,
  aes(
    x = bill_length_mm, y = bill_depth_mm,
    color = species, shape = species
  )
) +
  geom_point() +
  scale_color_colorblind() +
  labs(x = "Bill length (mm)", y = "Bill depth (mm)") +
  theme_minimal()
```
````

## YAML: Chunk options {auto-animate="true"}

````yaml
#| label: bill-dims-species
#| fig-width: 5
#| fig-cap: A propos de penguins
````

Quarto introduit le "hash pipe" dans `#|` - c'est la syntaxe pr√©f√©r√©e, bien que Quarto soit r√©trocompatible avec l'ancienne syntaxe R Markdown.

1. Coh√©rence entre les _computation engine_ (Jupyter/knitr)
2. Coh√©rence entre les options YAML / Chunk / Divs (`:::`)
3. Une option par ligne, offrant l'autocompl√©tion et la validation

## YAML: Chunk options {auto-animate="true"}

````yaml
#| fig-width: 5
#| fig-cap: √Ä propos de penguins
````

Notez que le YAML pour Quarto suivra une syntaxe de type "mot-mot"

::: {.callout-note appearance="minimal"}
La diff√©rence de syntaxe est due au fait que Quarto est plus √©troitement align√© sur les noms de format et les options de Pandoc (d'o√π l'utilisation de - comme s√©parateur de mots au lieu de `_` ou `.`).
:::


## √Ä vous !

```{r}
#| echo: false
countdown(minutes = 5)
```

::: callout
# Transformons en .qmd

1.  Copier `manchots.Rmd` √† `nouveau-manchots.qmd`
2.  Utiliser `knitr::convert_chunk_header()` sur le fichier .qmd (Regarder l'aide de la fonction)
3.  V√©rifier les configurations des chunks de code (`.` √† transformer en `-` par example)
4.  V√©rifier l'en-t√™te YAML du fichier `.qmd`
5.  Produire un HTML du document au format `.qmd`
:::

::: callout-tip
## Nouvelle fonctionnalit√© Quarto

Tester l'autocompl√©tion et validation YAML dans RStudio IDE [üîó](https://quarto.org/docs/tools/rstudio.html#yaml-intelligence)
:::

# Quarto unifie R Mardown

Retrouvons des fonctionnalit√©s !

## Callout Blocks {.smaller}

![](https://github.com/rstudio/bookdown/raw/main/man/figures/logo.png){.absolute fig-alt="Logo bookdown" top="-20" right="100" height="120"}

| R Markdown                                                                                                                                          | Quarto                                                                                                                |
|----------------------------------|--------------------------------------|
| [Custom Blocks](https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html) de **rmarkdown** et **bookdown** √† cr√©er et *styliser* soit m√™me. | [Callout Blocks](https://quarto.org/docs/authoring/callouts.html) disponible dans tous les formats et d√©j√† *stylis√©*. |

``` markdown
::: {.callout-note}

## √Ä propos des 'callouts'

Notez qu'il existe cinq types de 'callout', dont : `note`, `warning`, `important`, `tip`, et `caution`.
:::
```

::: callout-note

## √Ä propos des 'callouts'

Notez qu'il existe cinq types de 'callout', dont : `note`, `warning`, `important`, `tip`, et `caution`.
:::

## R√©f√©rences (Figures, Tables, ...) {.smaller}

![](https://github.com/rstudio/bookdown/raw/main/man/figures/logo.png){.absolute fig-alt="Logo bookdown" top="-40" right="100" height="120"}

| R Markdown                                                                                                       | Quarto                                                                                                                                                |
|----------------------------------|--------------------------------------|
| Disponible avec **bookdown** dans les formats "book" (ex. `gitbook()`) ou les variantes comme `html_document2()` | [Cross References](https://quarto.org/docs/authoring/cross-references.html) disponible dans tous les formats, pour plus de contenus et configurables. |

::: callout-important
## Changement de syntaxe !

-   Pr√©fixe n√©cessaire sur le label sous la forme `fig-` et non `fig:`
-   M√™me syntax que citation avec `@label` et non pas `\@ref(label)`
:::

``` {.markdown data-id="md-block"}
Voir @fig-quarto-schematic pour une illustration du fonctionnement de Quarto par Alison Horst.

![Un sch√©ma illustr√© de Quarto](images/quarto-schematics.png){#fig-quarto-schematic}
```

## R√©f√©rences (Figures, Tables, ...) {.smaller}

![](https://github.com/rstudio/bookdown/raw/main/man/figures/logo.png){.absolute fig-alt="Logo bookdown" top="-40" right="100" height="120"}

``` {.markdown data-id="md-block"}
Voir @fig-quarto-schematic pour une illustration du fonctionnement de Quarto par Alison Horst.

![Un sch√©ma illustr√© de Quarto](images/quarto-schematics.png){#fig-quarto-schematic}
```

::: columns
::: column
Voir @fig-quarto-schematic pour une illustration du fonctionnement de Quarto par Alison Horst.
:::

::: column
![A schematic representing rendering of Quarto documents from .qmd](images/quarto-schematics.png){#fig-quarto-schematic fig-alt="A schematic representing rendering of Quarto documents from .qmd, to knitr or jupyter, to plain text markdown, then converted by pandoc into any number of output types including html, PDF, or Word document."}
:::
:::

::: attribution
Illustration extrait de la Keynote "Hello, Quarto" de Julia Lowndes et Mine √áetinkaya-Rundel (RStudio::conf(2022)).
:::

## Mise en page avanc√©e {.smaller}

![](https://github.com/rstudio/distill/raw/main/man/figures/logo.png){.absolute fig-alt="Logo distill" top="-40" right="100" height="120"}

| R Markdown                                                                                                                                                                                                 | Quarto                                                                                                                         |
|----------------------------------|--------------------------------------|
| Disponible pour HTML avec **distill** ([Figure avanc√©e](https://rstudio.github.io/distill/figures.html)) ou **tufte** ([Contenu dans la marge](https://rstudio.github.io/tufte/#arbitrary-margin-content)) | [Article Layout](https://quarto.org/docs/authoring/article-layout.html) disponible pour format multiple et plus flexibilit√©. |

::: {layout-ncol=2}
![](images/2-quarto-layout.png)

![](images/3-quarto-layout.png)
:::

::: aside
Attention √† la conversion **distill** √† Quarto √† cause de conflits d'options ! 
:::

## √Ä Vous !

```{r}
#| echo: false
countdown(minutes = 10)
```

::: callout

# Ajoutez ces fonctionnalit√©s !

* Essayer d'ajouter les fonctionnalit√©s suivantes: 
  * [Article Layout](https://quarto.org/docs/authoring/cross-references.html), 
  * [Cross References](https://quarto.org/docs/authoring/cross-references.html), 
  * [Callout Blocks](https://quarto.org/docs/authoring/callouts.html).
* Regarder comment ajouter des mises en pages pour les figures ([Figure computation](https://quarto.org/docs/authoring/figures.html#computations)).
* Et bien plus dans la section [Authoring](https://quarto.org/docs/guide/) du guide Quarto. Curieux des fonctionnalit√©s uniques de Quarto ?
  * [Code Annotation](https://quarto.org/docs/authoring/code-annotation.html)
  * [Diagram](https://quarto.org/docs/authoring/diagrams.html)
:::

# Les formats Quarto

Comme R Markdown, on peut produire diff√©rents formats de documents.

## De multiples formats...

:::: columns
::: column
* `format: html`
* `format: pdf`
:::
::: column
* `format: docx`
* `format: revealjs`
:::
::::

```yaml
format: 
  html:
    code-fold: true
  pdf:
    lof: true #<1>
toc: true #<2>
```
1. `lof` = _List Of Figures_
2. Option commune aux formats HTML et PDF

<br>

## ...bas√©e sur Pandoc 

## {background-video="images/quarto-all-formats.mp4" background-video-loop=true background-video-muted=true}

## Options Specifiques - Themes HTML

Le HTML de Quarto est stylis√© avec Bootstrap 5 et des valeurs par d√©faut choisies pour Quarto.

```yaml
---
format:
  html:
    theme: litera
---
```

## Options Specifiques - Th√®mes HTML {#html-theme auto-animate="true"}

Le HTML de Quarto est stylis√© avec Bootstrap 5 et des valeurs par d√©faut choisies pour Quarto.

```yaml
---
format:
  html:
    theme: 
      - litera
      - custom.scss
---
```

::::: {.r-stack}

Vous pouvez √©galement utiliser un th√®me et personnaliser les composants avec SCSS/SASS.

:::: {.fragment}

::: {.callout-note appearance="minimal"}
Pr√©sentation sur le sujet plus tard dans la semaine ! üòâ
:::

::::
:::::

## _Code tools_

```yaml
format:
  html:
    code-fold: true
    code-tools: true
```

![](images/code-tools.png){fig-alt="Capture d'√©cran du menu ajout√© dans un HTML quarto quand code-tools est activ√©"}

## D√©couvrir les options ! 

* Guide Quarto: <https://quarto.org/docs/guide/>
* Pages de r√©f√©rencement des options pour chaque format: <https://quarto.org/docs/reference/>

## D√©mo 

::: callout

# G√©n√©rons un PDF

* Pas ou peu de changement dans la `.qmd` utilis√© pour produire un HTML.
:::

::: {.callout-warning}

## Si vous voulez essayer... 

Il faut √™tre configur√© pour LaTeX mais

* PDF = LaTeX => Installation de TinyTeX
* LaTeX = Paquets CTAN => Installation longue
* Produire un PDF avec LaTeX => Pas si rapide

:::

# 

Allons plus pour produire des contenus plus √©labor√©s avec Quarto 

[[Next]{.button}](/3-documents/)
